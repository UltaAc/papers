name: ARM64 Optimized macOS Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: build-aux/macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Homebrew
        uses: actions/cache@v3
        with:
          path: |
            /opt/homebrew
            ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-arm64-brew-${{ hashFiles('build-aux/macos/papers.modules') }}

      - name: Setup ARM64 environment
        run: |
          # Install Homebrew for ARM
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
          source ~/.zshrc

      - name: Install core dependencies
        run: |
          # Limit Homebrew to only essential packages
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          export HOMEBREW_NO_AUTO_UPDATE=1

          arch -arm64 brew install \
            meson \
            ninja \
            cmake \
            gettext \
            pkg-config \
            gtk-mac-integration \
            libarchive \
            poppler \
            djvulibre \
            --formula \
            --ignore-dependencies \
            --overwrite

          # Explicitly prevent unwanted upgrades
          arch -arm64 brew pin python@3.12 sqlite certifi
          arch -arm64 brew unlink azure-cli aws-sam-cli selenium-server kotlin || true

          # Cleanup any accidental installations
          arch -arm64 brew autoremove
          arch -arm64 brew cleanup

      - name: Build gtk-mac-bundler
        run: |
          git clone --depth 1 https://gitlab.gnome.org/GNOME/gtk-mac-bundler.git ~/gtk-mac-bundler
          cd ~/gtk-mac-bundler
          make install
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure build environment
        run: |
          export CC="clang -arch arm64"
          export CXX="clang++ -arch arm64"
          export MACOSX_DEPLOYMENT_TARGET=12.0
          export PKG_CONFIG_PATH="/opt/homebrew/opt/icu4c/lib/pkgconfig:$PKG_CONFIG_PATH"

          # Enable parallel builds
          echo "MAKEFLAGS=-j$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
          echo "NINJAFLAGS=-j$(sysctl -n hw.activecpu)" >> $GITHUB_ENV

      - name: Build and package (unsigned)
        run: |
          # Set JHBuild prefix and paths
          export JH_PREFIX="$HOME/gtk/inst"
          export PROJECT_ROOT="$GITHUB_WORKSPACE"
          export PATH="$JH_PREFIX/bin:$PATH"

          # Verify meson.build exists
          if [ ! -f "$PROJECT_ROOT/meson.build" ]; then
            echo "❌ Missing meson.build in project root!"
            exit 1
          fi

          # Configure build with explicit source path
          meson setup "$PROJECT_ROOT/builddir" "$PROJECT_ROOT" \
            --prefix="$JH_PREFIX" \
            --cross-file="$PROJECT_ROOT/build-aux/macos/arm64-darwin.txt" \
            -Dbuildtype=release \
            -Ddefault_library=both \
            --wipe

          # Build and install
          ninja -C "$PROJECT_ROOT/builddir" install -j$(sysctl -n hw.activecpu)

          # Verify binary
          if [ ! -f "$JH_PREFIX/bin/papers" ]; then
            echo "❌ Binary build failed!"
            exit 1
          fi

          # Create bundle
          cd build-aux/macos
          gtk-mac-bundler papers.bundle \
            --binary="$JH_PREFIX/bin/papers" \
            --resource="$JH_PREFIX/share" \
            --icon=Papers.icns \
            --no-sign

          # Create DMG
          create-dmg \
            --volname "Papers ARM64" \
            papers-unsigned.dmg \
            papers.app/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Papers-ARM64-Pro
          path: build-aux/macos/papers-unsigned.dmg
